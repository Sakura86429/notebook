

连接mysql数据库中的user表

浏览器检查中出现的jsessionid就是用来判断当前用户对应于哪个session
事实上当用户访问服务器的时候会为每一个用户开启一个session，浏览器是怎么判断这个session到底是属于哪个用户呢？jsessionid的作用就体现出来了：jsessionid就是用来判断当前用户对应于哪个session。
换句话说服务器识别session的方法是通过jsessionid来告诉服务器该客户端的session在内存的什么地方。

用户模块
    通过用户行为来区分（功能）       actionName
        用户登录           actionName="login"
        进入个人中心        actionName="userCenter"
        加载头像            actionName="userHead"
        验证昵称的唯一性     actionName="checkNick"
        修改用户信息        actionName="updateUser"
        用户退出            actionName="logout"

    在UserServlet的service方法中，通过传来的参数获取用户行为
        1.获取用户行为
            String actionName = request.getParameter("actionName");
        2.判断用户行为，调用对应的方法
            if ("login".equals(actionName)) {
                // 用户登录
            } else if ("userCenter".equals(actionName)) {
                // 进入个人中心
            }


一、用户登录
    ==================前端实现==================
        1. 添加表单，设置表单属性
            action="user" method="post" id="loginForm"
        2. 设置表单元素的name属性值，修改id属性值（首字母改小写，因为ta默认的大写，我们改小写）
            设置文本框和密码框的name属性值
            设置复选框的name属性值和value属性值（如果复选框未选中，则获取不到value属性值）
            设置隐藏域，传递用户行为 （name="actionName" value="login"）
        3. 在 config.js 文件中，添加按钮的点击事件绑定的函数 checkLogin()
            表单校验
                1. 获取表单元素的值（姓名、密码）
                2. 判断元素的值是否为空（引入util.js文件）
                    如果为空，设置提示信息 （通过设置span标签），并return
                3. 如果不为空，则提交表单

    ==================后端实现==================
    整体思路：
        1. 获取参数（姓名、密码）
        2. 参数的非空校验（ResultInfo的封装类，用来封装响应结果  状态码、提示信息、返回的对象）
            如果为空
            （告诉用户，输出一个字符串非常不方便，所以这里准备了一个封装类用来封装我们的结果
            ，里面有失败原因，失败状态，假设成功给个1，失败给个0来告诉前端当前是成功还是失败
            2. 把失败的原因告诉前端，是应为以用户名或者密码失败
            3. 如果失败了想把结果显示出来也可以）
                设置ResultInfo对象的状态码和提示信息
                将ResultInfo对象设置request作用域中
                请求转发跳转到登录页面
                return
        3. 如果不为空，通过用户名查询用户对象
        4. 判断用户对象是否为空
            如果为空
                设置ResultInfo对象的状态码和提示信息
                将ResultInfo对象设置request作用域中
                请求转发跳转到登录页面
                return
        5. 如果用户对象不为空，将数据库中查询到的用户对象的密码与前台传递的密码作比较 （将密码加密后再比较）
            如果密码不正确
                设置ResultInfo对象的状态码和提示信息
                将ResultInfo对象设置request作用域中
                请求转发跳转到登录页面
                return
        6. 如果密码正确
            将用户信息存到session作用域中（如果我们想拿用户信息都可以去session中去拿，如果用request的话一次请求后就失效了）
            （request作用域只有一次，不管是页面跳转还是重定向，作用只有一次；如果想要反复拿到用户信息的花就要存到session中去）
            判断用户是否选择记住密码（rem的值是1）
                如果是，将用户姓名与密码存到cookie中，设置失效时间，并响应给客户端
                如果否，清空原有的cookie对象
            重定向跳转到index页面
     // 不分层的话，不管是获取参数还是做判断，亦或者说去查数据库再做一些逻辑判断，或者是最后的响应结果统统在一个方法里面写，那就会显得非常非常的臃肿
     // 所以我们通常去写代码的时候都会去做一个分层
    分层思想：
        Web层：（控制层：接收参数、响应（结果）数据）
            1. 获取参数 （姓名、密码）
            2. 调用Service层的方法，service层告诉我们成功和失败，返回ResultInfo对象（通过这个对象的状态知道当前是成功还是失败）
            3. 判断是否登录成功
                如果失败
                    将resultInfo对象设置到request作用域中
                    请求转发跳转到登录页面
                如果成功
                    将用户信息设置到session作用域中
                    判断用户是否选择记住密码（rem的值是1）
                        如果是，将用户姓名与密码存到cookie中，设置失效时间，并响应给客户端
                        如果否，清空原有的cookie对象
                    重定向跳转到index页面

        Service层：（业务逻辑层：参数判断、业务逻辑处理）
            1. 判断参数是否为空
                如果为空
                    设置ResultInfo对象的状态码和提示信息
                    返回resultInfo对象
            2. 如果不为空，通过用户名查询用户对象
            3. 判断用户对象是否为空
                    如果为空
                        设置ResultInfo对象的状态码和提示信息
                        返回resultInfo对象
            4. 如果用户对象不为空，将数据库中查询到的用户对象的密码与前台传递的密码作比较 （将密码加密后再比较）
                   如果密码不正确
                        设置ResultInfo对象的状态码和提示信息
                        返回resultInfo对象
            5. 如果密码正确
                设置ResultInfo对象的状态码和提示信息
            6. 返回resultInfo对象


        Dao层：（数据访问层：数据库中的增删改查操作）
            通过用户名查询用户对象， 返回用户对象
                1. 获取数据库连接
                2. 定义sql语句
                3. 预编译
                4. 设置参数
                5. 执行查询，返回结果集
                6. 判断并分析结果集
                7. 关闭资源


二、非法访问拦截和免登录

	非法访问拦截
		拦截的资源：
			所有资源   /*

		需要被放行的资源：
			1、指定页面，放行 （用户无需登录即可访问的页面；例如：登录页面login.jsp、注册页面register.jsp等）
			2、静态资源，放行 （存放在statics目录下的资源；例如：js、css、images等）
			3、指定行为，放行 （用户无需登录即可执行的操作；例如：登录操作user?actionName=login、注册操作等）
			4、登录状态，放行 （判断session作用域中是否存在用户信息；存在就放行，不存在，就拦截跳转到登录页面）

	免登录（自动登录）
		通过Cookie和Session对象实现
		什么时候使用免登录：
		    当用户处于未登录状态，且去请求需要登录才能访问的资源时，调用自动登录功能
		目的：
			让用户处于登录状态（自动调用登录方法）
		实现：
			从Cookie对象中获取用户的姓名与密码，自动执行登录操作
				1、获取cookie数组
				2、判断cookie数组
				3、遍历cookie数组，获取指定的cookie对象   （name为user的cookie对象）
				4、得到指定cookie对象的value    （姓名与密码：userName-userPwd）
				5、通过split()方法将value字符串转换成数组
				6、从数组中别得到姓名和密码
				7、请求转发跳转到登录操作    user?actionName=login&userName=姓名&userPwd=密码
				return;

三、用户退出
    （1. 回想一下，之前用户登陆成功之后，会将用户信息存在session里面，有session的话我们就知道用户是一个登陆状态；
    所以我们只需要将session清楚，那么这时候就是未登录状态了
    2. 因为我们如果是记住密码的话会存Cookie，存Cookie的话会执行Cookie自动登录操作，所以我们还需要将Cookie删除
    3. 最后需要我们跳回到登陆页面）

    前台：
        设置超链接的请求地址 user?actionName=logout

    后台：
        1. 销毁Session对象
        2. 删除Cookie对象
        3. 重定向跳转到登陆页面


四、进入个人中心
    前台：
        设置超链接的访问地址 user?actionName=userCenter
        通过el表达式获取session作用域中的用户信息
    后台：
        1. 设置首页动态包含的页面值
        2. 请求转发跳转到index.jsp

五、加载头像（上一步完成后图片并没有被加载出来，因为数据库中存的是一个路径，图片是存放在我们的项目下面的
            ，我们在WEB-INF下upload中存图像，所以就需要在这个目录下把头像读取出来；取出来以后用流输出数据就好了，然后输出数据会给前台src所接收
            ，src接收以后它就可以把对应的图片给显示出来了）
    前台：
        设置img标签的src属性，请求后台加载头像（后台通过下面src中内容来加载头像）
            src="user?actionName=userHead&imageName=图片名称"（通过el表达式）
    后台：
        1. 获取参数 （图片名称）
        2. 得到图片的存放路径（request.getServletContext().getRealPathR("/")）
        3. 通过图片的完整路径，得到file对象
        4. 通过截取，得到图片的后缀（如果不得到图片类型的话就会默认二进制输出，就会输出一片乱码）
        5. 通过不同的图片后缀，设置不同的响应的类型
        6. 利用工具类FileUtils的copyFile（）方法，将图片拷贝给浏览器

六、验证昵称的唯一性
    前台：
        昵称文本框的失焦事件 blur
            1. 获取昵称文本框的值
            2. 判断值是否为空（添加config.js中的isEmpty函数）
                如果为空，提示用户，禁用按钮，并return
            3. 判断昵称是否做了修改
                从session作用域中获取用户昵称
                （如果在js中想要使用el表达式获取域对象，js需要写在JSP页面中，无法在js文件中获取）
                如果用户昵称与session中的昵称一致，则return
            4. 如果昵称做了修改
                发送ajax请求后台，验证昵称是否可用
                    如果不可用，提示用户，并禁用按钮
                    如果可用，清空提示信息，按钮可用
        昵称文本框的聚焦事件 focus
            1. 清空提示信息
            2. 按钮可用

    后台：
        Web层：
            1. 获取参数(昵称)
            2.从session作用域获取用户对象，得到用户ID
            3.调用Service层的方法，得到返回的结果
            4.通过字符输出流将结果响应给前台的ajax的回调函数
            5.关闭资源

        Service层：
            1. 判断昵称是否为空
                如果为空，返回"0"（注意是返回字符串0，如果是数值0的话可能会在传输过程中当成二进制的0）
            2. 调用Dao层，通过用户ID和昵称查询用户对象
            3. 判断用户对象存在
                存在，返回"0"
                不存在，返回"1"

        Dao层：
            1. 定义SQL语句
                通过用户ID查询除了当前登录用户之外是否有其他用户使用了该昵称
                    指定昵称 nick （前台传递的参数）
                    当前用户 userID （session作用域中的user对象）
                    String sql = "select * from user where nick = ? and userID != ?"
                2. 设置参数集合
                3. 调用BaseDao的查询方法

七、修改用户信息
    前台：
        文件上传表单（因为要上传文件，所以普通的表单不适用了，要用文件上传表单才行）
            1. 表单
                表单类型 enctype="multipart/form-data"
                提交方式 method="post"
            2. 表单元素
                设置name属性值（昵称、心情、头像）
                设置隐藏域（前端form中的hidden）存放用户行为actionName
    后台：
        Web层（接收参数，调用Service层，响应结果）：
        // 如果是正常的接收参数，我们可以在Web层接收，然后传给Service层；
        // 如果我们的Service层需要用到request对象/response对象的时候，我们就可以直接将我们的request对象传给Service层，让Service层去接收参数
            注：文件上传必须在Servlet类上添加和文件上传相关的注解@multipartConfig！！！否则 所有参数都拿不到
            1. 调用Service层的方法，传递request对象作为参数，返回resultInfo封装对象
            2. （我们拿到对象以后，需要把对象返回给前端，怎么返回呢？要看前端是怎么响应过来的：
                如果前端使用ajax响应，那我们这里就用流，将response对象转换为json字符串输出出去
                如果是一个表单提交过来的，这种情况下你的页面要跳转回去，所以你需要将你的结果传到请求域中
                那我们这里是用文件上传表单来传数据的，那你最重要返回到页面中）
                将resultInfo对象存到request作用域中
            3. 请求转发跳转到个人中心页面 （user?actionName=userCenter）

        Service层：
            1. 获取参数（昵称、心情）（因为头像是一个文件传过来的，所以应该是一个文件域）
            2. 参数的非空校验（判断必填参数非空，这里是昵称）
                如果昵称为空，将状态码和错误信息设置到resultInfo对象中，返回resultInfo对象
            3. 从session作用域中获取用户对象（目的是当不修改头像的时候，获取用户对象中的默认头像）
            4. 实现上传文件
                1. 获取Part对象（因为servlet3.0中会将我们的文件封装成一个Part对象） request.fetPart("name");name代表的是file文件域的name属性值（其实就是里面那么属性值中的img）
                2.通过Part对象获取上传文件的文件名
                3.判断文件名是否为空
                4.获取文件存放的路径WEB -INF /upload/目录中
                5.上传文件到指定目录
            5.更新用户头像(将原本用户 对象中的默认头像设置为上传的文件名)
            6.调用Dao层的更新方法，返回受影响的行数
            7.判断受影响的行数
                如果大于0，则修改成功;否则修改失败
            8.返回resultInfo对象

        Dao层：
            通过用户ID修改用户信息
            1.定义SQL语句（修改tb_user这个表）
                String sql = "update tb_ user set nick = ?, mood = ?, head = ? where userId = ? ":
            2. 设置参数集合
            3.调用BaseDao的更新方法， 返回受影响的行数
            4.返回受影响的行数



























